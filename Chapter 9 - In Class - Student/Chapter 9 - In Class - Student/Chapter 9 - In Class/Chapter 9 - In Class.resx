<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Creating and Using the Coin Class

In this tutorial you complete the Coin Toss application. The application’s form, which
has already been created for you, is shown in above . When you run the completed
application, you can click the Toss Five Times button and the application will simulate
a coin being tossed five times. The results of each coin toss are displayed in the list box. </value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Creating and Using the CellPhone Class

You have been asked to create a class that represents a cell phone. The class should keep the following data about a cell phone:
• The phone’s brand name, model, retail price,

The class should have the following public properties:
• Brand—a string property that will store the phone’s brand name
• Model—a string property that will store the phone’s model
• Price—a decimal property that will store the phone’s retail price

The class should have the following private fields:
• _brand—a string that serves as the backing field for the Brand property
• _model—a string that serves as the backing field for the Model property
• _price—a decimal that serves as the backing field for the Price property

The class should also have a constructor that initializes the private fields. 
The _brand and _model fields will be initialized with empty strings, and the _price field will be initialized with the value 0. You create the CellPhone class in a project that will create an object of the class and test the object’s properties. The project is named Cell Phone Test and has already been started for you; it is located in the Chap09 folder of the Student Sample Programs.  Show the application’s form. At run time, you enter sample cell phone data into the text boxes and then click the Create Object button. The application creates an object of the
CellPhone class and assigns the data from the text boxes to the object’s properties. It then reads and displays the values of the object’s properties in the brandLabel, modelLabel, and priceLabel controls. </value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>Creating and Using the BankAccount Class

In this tutorial you write a class named BankAccount that simulates a bank account. When you create an instance of the class, you pass the account’s starting balance as an argument to the constructor. The class will have a Deposit method that adds an amount to the balance and a Withdraw method that subtracts an amount from the balance. The class will also have a read-only Balance property that reports the account’s balance. The BankAccount class is part of the Account Simulator application, which has already been started for you. Figure 9-15shows the application’s form. When the completed application runs, it creates a BankAccount object with a starting balance of $1,000.00. The balance is displayed in the balanceLabel control. If you want to make a deposit, you can enter the amount into the depositTextBox and click the Deposit button. If you want to make a withdrawal, you can enter the amount into the withdrawTextBox and click the Withdraw button. Each time you perform one of these actions, the new account 
blance is displayed. </value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>In this tutorial you complete the Cell Phone Inventory application. Figure above shows the application’s form, which has already been created for you. When you run the completed application, you can enter data about a cell phone into the TextBox controls. When you click the Add Phone button, that data is assigned to a CellPhone object’s properties and then the object is added to a List. You can do this as many times as you wish. Each time you add a cell phone, its brand and model is displayed in the list box. If you select a phone in the list box, the application displays that phone’s price.  </value>
  </data>
</root>